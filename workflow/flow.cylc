#!jinja2

[task parameters]
    satellite = {{ SATELLITES | join(", ")}}

[scheduling]
    initial cycle point = {{ START }}
    final cycle point = {{ END }}
    runahead limit = P1
    [[graph]]
        R1 = """
            INIT
            init_soit => get_all_overpass_times
        """
        P1D = """
            get_all_overpass_times[^] => get_single_overpass_time<satellite> => done
            
            INIT[^]:succeed-all => LOAD_IMAGE<satellite>:succeed-all => preprocess<satellite>:finish => done
            
            get_single_overpass_time<satellite> & preprocess<satellite>:succeed? => exportH5<satellite>
            preprocess<satellite>:failed? => !exportH5<satellite>
            
            done[-P1D] => done
        """
        R1/P0Y = done => tracking => get_rotation

    [[queues]]
        [[[fetchdata]]]
            limit = 1
            # Limit to 4 instances hitting the API at once. 
            # Values higher than this might lead to throttling.
            members = LOAD_IMAGE
        
        [[[preprocess]]]
            limit = 1
            # Limit to 2 instances only due to memory constraints. 
            # Can be removed on a system with more memory or a scheduler.
            members = PREPROCESS


[runtime]
    [[root]]
        work sub-directory = .
        execution time limit = PT5M
        [[[directives]]]
            --mem = 8G
        
        [[[environment]]]
            # Update these variables with your run parameters
            date=$(isodatetime "$CYLC_TASK_CYCLE_POINT" --print-format CCYY-MM-DD)
            date_without_dashes=${date//-/}
            all_overpass_time_file="overpass-times.csv"
            tracked_floes_file="floes.tracked.csv"
            rotation_tracked_floes_file="floes.tracked.rotation.csv"
            
            {% if IFT_INSTALL == "Inject" %}
                IFT={{ IFT_COMMAND }}
            {% elif IFT_INSTALL == "Docker" %}
                IFT="docker run -v `pwd`:/app -w /app ghcr.io/wilhelmuslab/ice-floe-tracker-pipeline/cli:{{ IFT_VERSION }}"
            {% elif IFT_INSTALL == "Apptainer" %}
                IFT="apptainer run docker://ghcr.io/wilhelmuslab/ice-floe-tracker-pipeline/cli:{{ IFT_VERSION }}"
            {% else %}
                {{ raise('IFT_INSTALL not recognized.') }}
            {% endif %}

            {% if FSDPROC_INSTALL == "Inject" %}
                FSDPROC={{ FSDPROC_COMMAND }}
            {% elif FSDPROC_INSTALL == "Source" %}
                FSDPROC="pipx run --spec git+https://github.com/WilhelmusLab/ebseg@{{ FSDPROC_VERSION }} fsdproc"
            {% else %}
                {{ raise('FSDPROC_INSTALL not recognized.') }}
            {% endif %}

            {% if PASS_TIME_INSTALL == "Inject" %}
                PASS_TIME = {{ PASS_TIME_COMMAND }}
            {% elif PASS_TIME_INSTALL == "Source" %}
                PASS_TIME = "pipx run --spec git+https://github.com/wilhelmuslab/ice-floe-tracker-pipeline@{{ PASS_TIME_VERSION }}#subdirectory=satellite-overpass-identification-tool soit"
            {% else %}
                {{ raise('PASS_TIME_INSTALL not recognized.') }}
            {% endif %}

            {% if COLORIZE_INSTALL == "Inject" %}
                COLORIZE = {{ COLORIZE_COMMAND }}
            {% elif COLORIZE_INSTALL == "Source" %}
                COLORIZE = "pipx run --spec git+https://github.com/wilhelmuslab/ice-floe-tracker-pipeline@{{ COLORIZE_VERSION }}#subdirectory=label-colorizer colorize"
            {% else %}
                {{ raise('COLORIZE_INSTALL not recognized.') }}
            {% endif %}

            {% if CSVJOIN_INSTALL == "Inject" %}
                CSVJOIN = {{ CSVJOIN_COMMAND }}
            {% elif CSVJOIN_INSTALL == "Source" %}
                CSVJOIN = "pipx run --spec git+https://github.com/wilhelmuslab/ice-floe-tracker-pipeline@{{ CSVJOIN_VERSION }}#subdirectory=csvjoin csvjoin"
            {% else %}
                {{ raise('CSVJOIN_INSTALL not recognized.') }}
            {% endif %}

            JULIA_DEBUG={{ JULIA_DEBUG }}

    [[done]]
        script = """exit 0"""
    
    [[INIT]]
    [[init_soit]]
        inherit = INIT
        script = """
            ${PASS_TIME} --help
        """
    [[init_fsdproc]]
        inherit = INIT
        script = """
            ${FSDPROC} --help
        """
    [[init_colorize]]
        inherit = INIT
        script = """
            ${COLORIZE} --help
        """
    [[init_csvjoin]]
        inherit = INIT
        script = """
            ${CSVJOIN} --help
        """
    [[init_iftp]]
        inherit = INIT
        script = """
            ${IFT} --help
        """
        execution time limit = PT25M
        [[[directives]]]
            --mem = 64G

    
    [[get_all_overpass_times]]
        execution retry delays = PT15S, PT10M, PT1H, PT3H
        script = """
            ${PASS_TIME} --csvoutpath ${all_overpass_time_file} \
                --startdate {{ START }} --enddate {{ END }} \
                --centroid-lat {{ CENTROID_LAT }} --centroid-lon {{ CENTROID_LON }} \
                --SPACEUSER {{ SPACEUSER }} --SPACEPSWD {{ SPACEPSWD }}
        """

    [[<satellite>]]
        pre-script = """
            mkdir -p ${img_prefix}
        """
        [[[environment]]]
            satellite=${CYLC_TASK_PARAM_satellite}
            img_prefix = "${date_without_dashes}.{{ SCALE }}m.${satellite}/"
            landmask_file = "${img_prefix}landmask.tiff"
            landmask_binarized_file = "${img_prefix}landmask.binarized.tiff"
            landmask_binarized_dilated_file = "${img_prefix}landmask.binarized.dilated.tiff"
            truecolor_file = ${img_prefix}truecolor.tiff
            falsecolor_file = ${img_prefix}falsecolor.tiff
            cloud_file = ${img_prefix}cloud.tiff
            segmented_file = ${img_prefix}segmented.tiff
            labeled_file = ${img_prefix}labeled.tiff
            colorized_labeled_file = ${img_prefix}labeled.colorized.tiff
            labeled_props_file = ${img_prefix}labeled.props.csv
            overpass_time_file = ${img_prefix}overpass.txt
            hdf5_archive_file = ${img_prefix}results.h5
            fsdprocargs="--crs {{ CRS }} --bbox {{ BBOX }} --scale {{ SCALE }} --datetime ${date} --satellite ${satellite} --cache-directory /project/ebseg/http_cache/"
    
    [[get_single_overpass_time<satellite>]]
        inherit = <satellite>
        script = """
            # Get the date of the current task cycle point in YYYY-MM-DD format
            date_=$(isodatetime "$CYLC_TASK_CYCLE_POINT" --print-format "CCYY-MM-DD")
            
            # -F,: Split the lines from the file on commas,
            # -v search=...: set the value of the `search` variable to the date and satellite
            # $0 ~ search: match the line in the file containing the search variable
            # {print $3}: print the third value (from the comma-delimited split)
            # > ${filename}: write the value out to file
            awk -F, \
                -v search="${date_},${satellite}" \
                '$0 ~ search {print $3}' ${all_overpass_time_file} \
                > ${overpass_time_file}
        """
    
    [[LOAD_IMAGE]]
        execution retry delays = PT15S, PT10M, PT1H, PT3H
    
    [[LOAD_IMAGE<satellite>]]
        inherit = LOAD_IMAGE

    [[load_truecolor<satellite>]]
        inherit = <satellite>, LOAD_IMAGE<satellite>
        script = """
            ${FSDPROC} load ${truecolor_file} --kind truecolor ${fsdprocargs}
        """

    [[load_falsecolor<satellite>]]
        inherit = <satellite>, LOAD_IMAGE<satellite>
        script = """
            ${FSDPROC} load ${falsecolor_file} --kind bands721 ${fsdprocargs}
        """

    [[load_cloud<satellite>]]
        inherit = <satellite>, LOAD_IMAGE<satellite>
        script = """
            ${FSDPROC} load ${cloud_file} --kind cloud ${fsdprocargs}
        """
    
    [[load_landmask<satellite>]]
        inherit = <satellite>, LOAD_IMAGE<satellite>
        script="""
            ${FSDPROC} load ${landmask_file} --kind landmask ${fsdprocargs}
        """

    [[PREPROCESS]]
        execution time limit = PT120M

    [[preprocess<satellite>]]
        inherit = <satellite>, PREPROCESS
        script = """
            {% if PREPROCESSING == "Lopez" or PREPROCESSING == "LopezTiling" %}

                ${IFT} landmask_single \
                    -i ${landmask_file} \
                    -o ${landmask_binarized_file} \
                    -d ${landmask_binarized_dilated_file}
            
                {% if PREPROCESSING == "Lopez" %}

                    ${IFT} preprocess_single \
                        -t ${truecolor_file} \
                        -r ${falsecolor_file} \
                        -l ${landmask_binarized_file} \
                        -d ${landmask_binarized_dilated_file} \
                        -o ${labeled_file}

                {% elif PREPROCESSING == "LopezTiling" %}

                    ${IFT} preprocess_tiling_single \
                        -t ${truecolor_file} \
                        -r ${falsecolor_file} \
                        -d ${landmask_binarized_dilated_file} \
                        -l ${labeled_file} \
                        -s ${segmented_file} \
                        --tile-rblocks {{ TILE_RBLOCKS }} \
                        --tile-cblocks {{ TILE_CBLOCKS }} \
                        --ice-labels-prelim-threshold {{ ICE_LABELS_PRELIM_THRESHOLD }} \
                        --ice-labels-band-7-threshold {{ ICE_LABELS_BAND_7_THRESHOLD }} \
                        --ice-labels-band-2-threshold {{ ICE_LABELS_BAND_2_THRESHOLD }} \
                        --ice-labels-ratio-lower {{ ICE_LABELS_RATIO_LOWER }} \
                        --ice-labels-ratio-upper {{ ICE_LABELS_RATIO_UPPER }} \
                        --adapthisteq-white-threshold {{ ADAPTHISTEQ_WHITE_THRESHOLD }} \
                        --adapthisteq-entropy-threshold {{ ADAPTHISTEQ_ENTROPY_THRESHOLD }} \
                        --adapthisteq-white-fraction-threshold {{ ADAPTHISTEQ_WHITE_FRACTION_THRESHOLD }} \
                        --gamma {{ GAMMA }} \
                        --gamma-factor {{ GAMMA_FACTOR }} \
                        --gamma-threshold {{ GAMMA_THRESHOLD }} \
                        --unsharp-mask-radius {{ UNSHARP_MASK_RADIUS }} \
                        --unsharp-mask-amount {{ UNSHARP_MASK_AMOUNT }} \
                        --unsharp-mask-factor {{ UNSHARP_MASK_FACTOR }} \
                        --brighten-factor {{ BRIGHTEN_FACTOR }} \
                        --prelim-icemask-radius {{ PRELIM_ICEMASK_RADIUS }} \
                        --prelim-icemask-amount {{ PRELIM_ICEMASK_AMOUNT }} \
                        --prelim-icemask-factor {{ PRELIM_ICEMASK_FACTOR }} \
                        --icemask-band-7-threshold {{ ICEMASK_BAND_7_THRESHOLD }} \
                        --icemask-band-2-threshold {{ ICEMASK_BAND_2_THRESHOLD }} \
                        --icemask-band-1-threshold {{ ICEMASK_BAND_1_THRESHOLD }} \
                        --icemask-band-7-threshold-relaxed {{ ICEMASK_BAND_7_THRESHOLD_RELAXED }} \
                        --icemask-band-1-threshold-relaxed {{ ICEMASK_BAND_1_THRESHOLD_RELAXED }} \
                        --icemask-possible-ice-threshold {{ ICEMASK_POSSIBLE_ICE_THRESHOLD }} \
                        --icemask-n-clusters {{ ICEMASK_N_CLUSTERS }} 
                
                {% endif %}

            
                ${IFT} extractfeatures_single \
                    --input ${labeled_file} \
                    --output ${labeled_props_file} \
                    --minarea {{ MINFLOEAREA }} \
                    --maxarea {{ MAXFLOEAREA }}
            
            {% elif PREPROCESSING == "Buckley" %}

                workdir="${labeled_file}.work"
                mkdir -p "${workdir}"
                
                ${FSDPROC} process \
                    ${truecolor_file} \
                    ${cloud_file} \
                    ${landmask_file} \
                    ${workdir} \
                    --itmax {{ BUCKLEY_ITMAX }} \
                    --itmin {{ BUCKLEY_ITMIN }} \
                    --step {{ BUCKLEY_STEP }} \
                    --kernel-type {{ BUCKLEY_KERNEL_TYPE }} \
                    --kernel-size  {{ BUCKLEY_KERNEL_SIZE }}
                
                cp ${workdir}/final.tif ${labeled_file}
                cp ${workdir}/props.csv ${labeled_props_file}
            
            {% else %}
                 
                 {{ raise('PREPROCESSING type not recognized.') }}
            
            {% endif %}

            ${COLORIZE} ${labeled_file} ${colorized_labeled_file}
        """
    
    [[exportH5<satellite>]]
        inherit = <satellite>
        # Package intermediate and final outputs into HDF5 files
        script = """
        ${IFT} makeh5files_single \
            --passtime "$(cat ${overpass_time_file} | tr -d '\n\r')" \
            --truecolor ${truecolor_file} \
            --falsecolor ${falsecolor_file} \
            --labeled ${labeled_file} \
            --props ${labeled_props_file} \
            --output ${hdf5_archive_file}
        """

    [[tracking]]
        execution retry delays = PT10M
        execution time limit = PT120M
        # Pair and track identified floes across days
        script = """
            images=(*/labeled.tiff)
            props=${images[@]/.tiff/.props.csv}
            landmasks=(*/landmask.tiff)
            passtimes=${images[@]/labeled.tiff/overpass.txt}

            ${IFT} track_single \
                --imgs ${images[@]} \
                --props ${props[@]} \
                --latlon ${landmasks[0]} \
                --passtimes $(cat ${passtimes[@]} | tr '\n\r' ' ') \
                --output ${tracked_floes_file} \
                --dist {{ TRACK_DIST | join(" ") }} \
                --dt-thresh {{ TRACK_DT_THRESH | join(" ") }} \
                --Sminimumarea {{ TRACK_SMINIMUMAREA }} \
                --Sarearatio {{ TRACK_SAREARATIO }} \
                --Smajaxisratio {{ TRACK_SMAJAXISRATIO }} \
                --Sminaxisratio {{ TRACK_SMINAXISRATIO }} \
                --Sconvexarearatio {{ TRACK_SCONVEXAREARATIO }} \
                --Lminimumarea {{ TRACK_LMINIMUMAREA }} \
                --Larearatio {{ TRACK_LAREARATIO }} \
                --Lmajaxisratio {{ TRACK_LMAJAXISRATIO }} \
                --Lminaxisratio {{ TRACK_LMINAXISRATIO }} \
                --Lconvexarearatio {{ TRACK_LCONVEXAREARATIO }} \
                --mxrot {{ TRACK_MXROT }} \
                --psi {{ TRACK_PSI }} \
                --sz {{ TRACK_SZ }} \
                --comp {{ TRACK_COMP }} \
                --mm {{ TRACK_MM }} \
                --corr {{ TRACK_CORR }} \
                --large-floe-area {{ TRACK_LARGE_FLOE_AREA_MISMATCH_THRESHOLD }} \
                --small-floe-area {{ TRACK_SMALL_FLOE_AREA_MISMATCH_THRESHOLD }}
                
        """
        [[[directives]]]
            --mem = 64G

    [[get_rotation]]
        script = """
        tracked_floes_with_satellites=${tracked_floes_file/.csv/.satellite.csv}
        ${CSVJOIN} \
            ${tracked_floes_file} "passtime" \
            ${all_overpass_time_file} "overpass time" \
            ${tracked_floes_with_satellites} \
            --on-is-utc
        ${IFT} get_rotation_single \
            -i ${tracked_floes_with_satellites} \
            -o ${rotation_tracked_floes_file} \
            -c "satellite"
        """