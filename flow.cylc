#!jinja2

[scheduler]
    allow implicit tasks = True

[task parameters]
    satellite = {{ SATELLITES | join(", ")}}

[scheduling]
    initial cycle point = {{ START }}
    final cycle point = {{ END }}
    [[graph]]
        R1 = soit
        P1D = """
            soit[^] => preprocess<satellite>

            FETCHDATA_truecolor<satellite> & FETCHDATA_falsecolor<satellite> & FETCHDATA_landmask => preprocess<satellite> => extractfeatures<satellite> => cycle_end
            cycle_end[-P1D] => cycle_end
        """
        R1/P0Y = cycle_end => tracking & exportH5


[runtime]
    [[root]]
        [[[environment]]]
            # Update these variables with your run parameters
            date=$(isodatetime "$CYLC_TASK_CYCLE_POINT" --print-format CCYY-MM-DD)
            date_without_dashes=${date//-/}
            crs = {{ CRS }} # "EPSG:3413" for polar stereographic: left_x@top_y@right_x@lower_y
                            # "EPSG:4326" (same as WGS84) for lat/lon: top_left_lat@top_left_lon@lower_right_lat@lower_right_lon            

            bounding_box = {{ BBOX }}
            centroid_lat = {{ CENTROID_LAT }}
            centroid_lon = {{ CENTROID_LON }}
            minfloearea = {{ MINFLOEAREA }}
            maxfloearea = {{ MAXFLOEAREA }}

            scale = 250  # pixel scale in units of the CRS
            
            results_dir = "${CYLC_WORKFLOW_SHARE_DIR}"
            img_prefix = "${results_dir}/${date_without_dashes}.${scale}m"
            landmask_file = "${img_prefix}.landmask.tiff"
            landmask_binarized_file = "${img_prefix}.landmask.binarized.tiff"
            landmask_binarized_dilated_file = "${img_prefix}.landmask.binarized.dilated.tiff"

            PASS_TIME="pipx run --path ${CYLC_WORKFLOW_RUN_DIR}/lib/pass_time.py"            
            IFT="julia --project=${CYLC_WORKFLOW_RUN_DIR}/IFTPipeline.jl/ ${CYLC_WORKFLOW_RUN_DIR}/IFTPipeline.jl/src/cli.jl"
            FSDPROC="pipx run --editable --spec git+https://github.com/WilhelmusLab/ebseg.git@add-band721-support fsdproc --debug"

    [[soit]]
        # Convert param lists to indexable bash arrays and fetch Aqua and Terra satellite times for each location
        script = """
            ${PASS_TIME} --csvoutpath ${results_dir} \
            --startdate {{ START }} --enddate {{ END }} \
            --centroid-lat ${centroid_lat} --centroid-lon ${centroid_lon} \
            --SPACEUSER {{ SPACEUSER }} --SPACEPSWD {{ SPACEPSWD }}
        """

        
    [[FETCHDATA]]
    [[FETCHDATA<satellite>]]
        [[[environment]]]
            satellite=${CYLC_TASK_PARAM_satellite}
            truecolor_file = ${img_prefix}.${satellite}.truecolor.tiff
            falsecolor_file = ${img_prefix}.${satellite}.falsecolor.tiff
            segmented_floes_file = ${img_prefix}.${satellite}.segmented_floes.tiff
    
    [[FETCHDATA_truecolor<satellite>]]
        inherit = FETCHDATA<satellite>
        script = """
            ${FSDPROC} load ${truecolor_file} --datetime ${date} --scale ${scale} --satellite ${satellite} --kind truecolor --bbox ${bounding_box} --crs ${crs}
        """

    [[FETCHDATA_falsecolor<satellite>]]
        inherit = FETCHDATA<satellite>
        script = """
            ${FSDPROC} load ${falsecolor_file} --datetime ${date} --scale ${scale} --satellite ${satellite} --kind bands721 --bbox ${bounding_box} --crs ${crs}
        """
    
    [[FETCHDATA_landmask]]
        inherit = FETCHDATA
        script="""
            ${FSDPROC} load ${landmask_file} --datetime ${date} --scale ${scale} --kind landmask --bbox ${bounding_box} --crs ${crs}
            ${IFT} landmask_single -i ${landmask_file} -o ${landmask_binarized_file} -d ${landmask_binarized_dilated_file}
        """

    [[preprocess<satellite>]]
        inherit = FETCHDATA<satellite>
        # Preprocess the satellite imagery and convert to binary
        script = """
            ${IFT} preprocess_single -t ${truecolor_file} -r ${falsecolor_file} -l ${landmask_dir}/generated_landmask.jls -o ${segmented_floes_file}
        """

    [[extractfeatures]]
        # Identify floes and extract floe metrics from binary processed images
        script = """
            ${IFT} extractfeatures -i ${preprocess_dir} -o ${preprocess_dir} --minarea ${minfloearea} --maxarea ${maxfloearea}
        """

    [[tracking]]
        # Pair and track identified floes across days
        pre-script = """
            mkdir -p ${tracker_dir}
        """
        script = """
            sample_img=$(ls -d1 ${truecolor_dir}/* | head -1)
            ${IFT} track --imgs ${preprocess_dir} --props ${preprocess_dir} --passtimes ${preprocess_dir} --latlon ${sample_img} --output ${tracker_dir}
        """

    [[exportH5]]
        # Package intermediate and final outputs into HDF5 files
        pre-script = """
            mkdir -p ${preprocess_dir}/hdf5-files
        """
        script = """
        sample_img=$(ls -d1 ${truecolor_dir}/* | head -1)
        ${IFT} makeh5files --pathtosampleimg ${sample_img} --resdir ${preprocess_dir}
        """
