"""
    makeh5filename(imgfname, ts)

Generate the name of the HDF5 file from the name of the source image and the estimated satellite overpass time. The name of the HDF5 file is of the form `YYYYmmddTHHMM.labeled_image.250m.h5` where `YYYYmmddTHHMM` is the estimated satellite overpass time formatted string.
"""
function makeh5filename(imgfname, ts)
    fname = Dates.format(ts, "YYYYmmddTHHMM") * "." * split(imgfname, '.'; limit=2)[end]
    return replace(fname, "truecolor" => "labeled_image", "tiff" => "h5")
end

"""
    choose_dtype(mx)

Choose the appropriate unsigned integer type based on a maximum value.

# Arguments

  * `mx`: Maximum value to be stored in the unsigned integer type.

# Returns
    
      * `UInt8` if 0 ≤ `mx` ≤ 255.
      * `UInt16` if 0 ≤ `mx` ≤ 65535.
      * `UInt32` if 0 ≤ `mx` ≤ 2^32 - 1.
      * `UInt64` if 0 ≤ `mx` ≤ 2^64 - 1.
      * `UInt128` if 0 ≤ `mx` ≤ 2^128 - 1.

"""
function choose_dtype(mx::T) where {T <: Integer}
    types = [UInt8, UInt16, UInt32, UInt64, UInt128]
    for t_ in types
        if typemin(t_) <= mx <= typemax(t_)
            return t_
        end
    end
    throw("$mx can't be represented by any of $types")
end


"""
    makeh5files(pathtosampleimg, resdir)

Package the results of the IceFloeTracker pipeline in `resdir` into individual HDF5 files in `resdir/hdf5-files`. 

This function expects the following files to be present in `resdir`: `filenames.jls`, `passtimes.jls`, `segmented_floes.jls`, and `floe_props.jls`. These files are generated by the `IceFloeTracker` pipeline.

# Arguments:

  * `pathtosampleimg`: Path to a sample image in the truecolor resource folder. This is used to extract the coordinate reference system (CRS) and the latitude and longitude coordinates of the image pixels.
  * `resdir`: Path to the directory containing the results of the IceFloeTracker pipeline.
  * `iftversion`: This is automatically pulled into the function from an environment variable.

# File structure
Each HDF5 file has the following structure:

```
    🗂️ HDF5.File: (read-only) YYYYmmddTHHMM.sat.labeled_image.250m.h5
    ├─ 🏷️ contact
    ├─ 🏷️ crs
    ├─ 🏷️ fname_falsecolor
    ├─ 🏷️ fname_truecolor
    ├─ 🏷️ iftversion
    ├─ 🏷️ reference
    ├─ 📂 floe_properties
    │  ├─ 🏷️ Description of labeled_image
    │  ├─ 🏷️ Description of properties
    │  ├─ 🔢 column_names
    │  ├─ 🔢 labeled_image
    │  └─ 🔢 properties
    └─ 📂 index
    ├─ 🔢 latitude
    ├─ 🔢 longitude
    ├─ 🔢 time
    ├─ 🔢 x
    └─ 🔢 y
```
# The `floe_properties` and `index` group

The `floe_properties` group contains a floe properties matrix `properties` for `labeled_image` and associated `column_names`.
The `index` group contains the spatial coordinates in the source image coordinate reference system (default NSIDC polar stereographic, meters) and geographic coordinates (latitude and longitude, decimal degrees). Estimated satellite overpass time `time` is provided in Unix timestamp format (seconds since 1970-01-01 00:00 UTC).
"""
function makeh5files(; pathtosampleimg::String, resdir::String, iftversion=IceFloeTracker.IFTVERSION)
    latlondata = getlatlon(pathtosampleimg)

    ptpath = joinpath(resdir, "passtimes.jls")
    passtimes = deserialize(ptpath)
    ptsunix = Int64.(Dates.datetime2unix.(passtimes))

    fnpath = joinpath(resdir, "filenames.jls")
    truecolor_refs, falsecolor_refs = deserialize(fnpath)

    floespath = joinpath(resdir, "segmented_floes.jls") # for labeled_image
    floes = deserialize(floespath)

    colstodrop = [:row_centroid, :col_centroid, :min_row, :min_col, :max_row, :max_col]
    propspath = joinpath(resdir, "floe_props.jls")
    props = deserialize(propspath)
    for df in props
        converttounits!(df, latlondata, colstodrop)
    end

    h5dir = joinpath(resdir, "hdf5-files")
    mkpath(h5dir)
    for (i, fname) in enumerate(truecolor_refs)
        fname = makeh5filename(fname, passtimes[i])
        fnamepath = joinpath(h5dir, fname)
        h5open(fnamepath, "w") do file
            # Add top-level attributes
            attrs(file)["fname_falsecolor"] = falsecolor_refs[i]
            attrs(file)["fname_truecolor"] = truecolor_refs[i]
            attrs(file)["iftversion"] = string(iftversion)
            attrs(file)["crs"] = latlondata["crs"]
            attrs(file)["reference"] = "https://doi.org/10.1016/j.rse.2019.111406"
            attrs(file)["contact"] = "mmwilhelmus@brown.edu"

            g = create_group(file, "index")
            g["time"] = ptsunix[i]
            g["x"] = latlondata["X"]
            g["y"] = latlondata["Y"]

            g = create_group(file, "floe_properties")
            g["properties"] = Matrix(props[i])
            attrs(g)["Description of properties"] = """Generated using the `regionprops` function from the `skimage` package. See https://scikit-image.org/docs/0.20.x/api/skimage.measure.html#regionprops

            Area units (`area`, `convex_area`) are in sq. kilometers, length units (`minor_axis_length`, `major_axis_length`, and `perimeter`) in kilometers, and `orientation` in radians (see the description of properties attribute.) Latitude and longitude coordinates are in degrees, and the stereographic coordinates`x` and `y` are in meters relative to the NSIDC north polar stereographic projection.
            """

            g["column_names"] = names(props[i])
            comps = label_components(floes[i], trues(3, 3))
            mx = maximum(comps)
            T = choose_dtype(mx)
            g["labeled_image"] = T.(comps)

            attrs(g)["Description of labeled_image"] = "Connected components of the segmented floe image using a 3x3 structuring element. The property matrix consists of the properties of each connected component."
        end
    end
    return nothing
end


function makeh5files_single(; passtime::DateTime, iftversion::Union{String, Nothing}=nothing, truecolor::String, falsecolor::String, labeled::String, props::String, output::String)
    latlondata = getlatlon(truecolor)
    ptsunix = Int64(Dates.datetime2unix(passtime))
    labeled_ = load_labeled_img(labeled)

    if isnothing(iftversion)
        iftversion = string(IceFloeTracker.IFTVERSION)
    end

    props_ = DataFrame(CSV.File(props))
    colstodrop = [:row_centroid, :col_centroid, :min_row, :min_col, :max_row, :max_col]
    converttounits!(props_, latlondata, colstodrop)
    @info props_

    h5open(output, "w") do file
        # Add top-level attributes
        attrs(file)["fname_falsecolor"] = falsecolor
        attrs(file)["fname_truecolor"] = truecolor
        attrs(file)["iftversion"] = iftversion
        attrs(file)["crs"] = latlondata["crs"]
        attrs(file)["reference"] = "https://doi.org/10.1016/j.rse.2019.111406"
        attrs(file)["contact"] = "mmwilhelmus@brown.edu"

        g = create_group(file, "index")
        g["time"] = ptsunix
        g["x"] = latlondata["X"]
        g["y"] = latlondata["Y"]

        g = create_group(file, "floe_properties")
        write_dataset(g, "properties", [copy(row) for row in eachrow(props_)])  # `copy(row)` converts the DataSetRow to a NamedTuple
        attrs(g)["Description of properties"] = """ Area units (`area`, `convex_area`) are in sq. kilometers, length units (`minor_axis_length`, `major_axis_length`, and `perimeter`) in kilometers, and `orientation` in radians (see the description of properties attribute.) Latitude and longitude coordinates are in degrees, and the stereographic coordinates`x` and `y` are in meters relative to the NSIDC north polar stereographic projection. Generated using the `regionprops` function from the `skimage` package. See https://scikit-image.org/docs/0.20.x/api/skimage.measure.html#regionprops
        """

        mx = maximum(labeled_)
        T = choose_dtype(mx)
        # write_dataset(g, "labeled_image", T.(labeled_))
        imgdata = T.(permutedims(labeled_))
        obj, dtype = create_dataset(g, "labeled_image", imgdata)
        attrs(obj)["CLASS"] = "IMAGE"
        attrs(obj)["IMAGE_SUBCLASS"] = "IMAGE_INDEXED"
        attrs(obj)["IMAGE_MINMAXRANGE"] = [minimum(imgdata), maximum(imgdata)]

        attrs(obj)["description"] = "Connected components of the segmented floe image using a 3x3 structuring element. The property matrix consists of the properties of each connected component."
        write_dataset(obj, dtype, imgdata)

    end
    return nothing
end