name: Build and PushContainer - Julia
on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
  release:
    types: [published]
  workflow_dispatch:
  
env:
  DOCKER_HUB_IMAGE_NAME: brownccv/icefloetracker-julia
  GCR_IMAGE_NAME: ghcr.io/${{ github.repository }}/cli

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    outputs:
      tagged_image_name: ${{ steps.tagged_image_name.outputs.tagged_image_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ccvbot
          password: ${{ secrets.CCVBOT_DOCKER_PASSWORD }}
      
      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_HUB_IMAGE_NAME }}
            ${{ env.GCR_IMAGE_NAME }}
            
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            JULIA_CPU_TARGET=generic;sandybridge,-xsaveopt,clone_all;haswell,-rdrnd,base(1);x86-64-v4,-rdrnd,base(1);armv7-a;armv7-a,neon;armv7-a,neon,vfp4
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.GCR_IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Get tagged image name
        id: tagged_image_name
        run: |
          GCR_IMAGE_NAME_LOWERCASE=`echo ${{ env.GCR_IMAGE_NAME }} | tr '[:upper:]' '[:lower:]'`
          echo "tagged_image_name=${GCR_IMAGE_NAME_LOWERCASE}@${{ steps.push.outputs.digest }}" >> ${GITHUB_OUTPUT}


  test-pipeline:
    runs-on: ubuntu-latest
    needs: build_and_push
    permissions:
      packages: read

    steps:
      
      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v4
        
      - name: Test Preprocessing (Lopez CLI)
        working-directory: ./test
        run: |
          source ./test-IFTPipeline.jl-cli.sh && \
          IFT="docker run -v `pwd`:/app -w /app --rm ${{ needs.build_and_push.outputs.tagged_image_name }}" \
          preprocess_lopez input_data/ne-greenland.20220914.terra.250m
  
      - name: Test Preprocessing CLI (Lopez with Tiling)
        working-directory: ./test
        run: |
          source ./test-IFTPipeline.jl-cli.sh && \
          IFT="docker run -v `pwd`:/app -w /app --rm ${{ needs.build_and_push.outputs.tagged_image_name }}" \
          preprocess_lopez_tiling input_data/ne-greenland.20220914.terra.250m

      - name: Test Tracker CLI
        working-directory: ./test
        run: |
          source ./test-IFTPipeline.jl-cli.sh && \
          IFT="docker run -v `pwd`:/app -w /app --rm ${{ needs.build_and_push.outputs.tagged_image_name }}" \
          track_lopez input_data/ne-greenland.2022091{3,4}.terra.250m/
    
  test-cli:
    runs-on: ubuntu-latest
    needs: build_and_push
    permissions:
      packages: read
    steps:
      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}    
      - name: Test CLI
        run: |
          docker run --rm --entrypoint "/bin/sh" \
            ${{ needs.build_and_push.outputs.tagged_image_name }} \
            -c "julia --project=/opt/IFTPipeline.jl -e 'using Pkg; Pkg.test()'"
