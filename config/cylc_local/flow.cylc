[scheduler]
    allow implicit tasks = True
[task parameters]
    # Update this variable to match the range of parameter sets
    param_set = 0..9
[scheduling]
    initial cycle point = PT1M #creates a datetime one minute from system time in UTC
    [[graph]]
        R1 = mkpaths<param_set> => fetchdata<param_set> & soit<param_set> => landmask<param_set> => preprocess<param_set> => extractfeatures<param_set> => tracking<param_set> & exportH5<param_set>

[runtime]
    [[root]]
        [[[environment]]]
            # Update these variables with your run parameters
            location = bering_strait,beaufort_sea,hudson_bay,baffin_bay,greenland_sea,barents-kara_seas,laptev_sea,sea_of_okhostk,chukchi-east_siberian_sea
            startdate = 2020-09-04,2020-09-05,2020-09-06,2020-09-07,2020-09-08,2020-09-09,2020-09-10,2020-09-11,2020-09-12
            enddate = 2020-09-07,2020-09-08,2020-09-09,2020-09-10,2020-09-11,2020-09-12,2020-09-13,2020-09-14,2020-09-15
            crs = wgs84 # epsg3413 for polar stereographic: left_x@top_y@right_x@lower_y
                             # wgs84 for lat/lon: top_left_lat@top_left_lon@lower_right_lat@lower_right_lon            
            bounding_box = 55.92827@-172.77869@74.25843@-163.83708,67.22298@-152.46426@79.32881@-94.68433,59.65687@-101.24295@57.54266@-66.04186,78.56615@-109.47909@66.90089@-44.91683,86.74814@-22.28082@67.34803@-8.27171,77.80705@94.33881@67.97169@33.18632,68.06271@146.18069@77.63863@84.72775,50.16669@155.19018@65.30942@136.05286,65.66088@171.50375@83.94127@143.00753
            centroid_x = 65,75,60,75,77,75,75,58,75
            centroid_y = -170,-135,-83,-65,-10,54,125,148,166
            minfloearea = 500
            maxfloearea = 90000
            project_dir="/Users/tdivoll/Projects/Wilhelmus/ice-floe-tracker-pipeline" #the location where you cloned the pipeline repo

            # Recommend using these default paths for output
            t = ${CYLC_WORKFLOW_INITIAL_CYCLE_POINT}
            julia_exec = "/usr/local/julia/bin/julia"
            report_dir = $project_dir/"workflow/report"
            results_dir = $project_dir/"results"/$t
            fetchdata_dir = $project_dir/"resources"/$t
            truecolor_dir = $fetchdata_dir/"truecolor"
            reflectance_dir = $fetchdata_dir/"reflectance"

    [[mkpaths<param_set>]]
        # Convert param location list to indexable bash array and make directories for each location
        # sed is used to tokenize the list of comma-separated inputs
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            res=$results_dir/${location_array[$i]}
            mkdir -p $fetchdata_dir/${location_array[$i]}
            mkdir -p $res/soit
            mkdir -p $res/landmasks
            mkdir -p $res/preprocess
            mkdir -p $res/tracker
            mkdir -p $res/preprocess/hdf5-files
        """
        
    [[fetchdata<param_set>]]
        # Convert param lists to indexable bash arrays and fetch reflectance, truecolor, and landmask for each location
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            bbox_array=( $(echo $bounding_box | sed -e 's/,/ /g') )
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            startdate_array=( $(echo $startdate | sed -e 's/,/ /g') )
            enddate_array=( $(echo $enddate | sed -e 's/,/ /g') )
            
            docker run --mount type=bind,source=$fetchdata_dir/${location_array[$i]},target=/tmp --mount type=bind,source=$report_dir,target=/usr/local/bin/../report brownccv/icefloetracker-fetchdata:main /usr/local/bin/fetchdata.sh -o /tmp -s ${startdate_array[$i]} -e ${enddate_array[$i]} -c $crs -b ${bbox_array[$i]}
        """
    [[soit<param_set>]]
        # Convert param lists to indexable bash arrays and fetch Aqua and Terra satellite times for each location
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            startdate_array=( $(echo $startdate | sed -e 's/,/ /g') )
            enddate_array=( $(echo $enddate | sed -e 's/,/ /g') )
            centroid_x_array=( $(echo $centroid_x| sed -e 's/,/ /g') )
            centroid_y_array=( $(echo $centroid_y | sed -e 's/,/ /g') )

            docker run --env SPACEUSER --env SPACEPSWD --mount type=bind,source=$results_dir/${location_array[$i]}/soit,target=/tmp --mount type=bind,source=$report_dir,target=/usr/local/bin/../report brownccv/icefloetracker-fetchdata:main python3 /usr/local/bin/pass_time_cylc.py --startdate ${startdate_array[$i]} --enddate ${enddate_array[$i]} --csvoutpath /tmp --centroid_x ${centroid_x_array[$i]} --centroid_y ${centroid_y_array[$i]} --SPACEUSER $SPACEUSER --SPACEPSWD $SPACEPSWD
        """

    [[landmask<param_set>]]
        # Generate land masks in Julia from raw landmask file
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )

            docker run --mount type=bind,source=$results_dir/${location_array[$i]}/landmasks,target=/tmp \
            --mount type=bind,source=$report_dir,target=/usr/local/bin/../report \
            brownccv/icefloetracker-julia:main $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl landmask $fetchdata_dir/${location_array[$i]} /tmp
        """

    [[preprocess<param_set>]]
        # Preprocess the satellite imagery and convert to binary
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )

            docker run --mount type=bind,source=$results_dir/${location_array[$i]}/preprocess,target=/tmp \
            --mount type=bind,source=$report_dir,taget=/usr/local/bin/../report \
            brownccv/icefloetracker-julia:main $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl preprocess -t $fetchdata_dir/${location_array[$i]}/truecolor -r $fetchdata_dir/${location_array[$i]}/reflectance -l $results_dir/${location_array[$i]}/landmasks -p $results_dir/${location_array[$i]}/soit -o /tmp
        """

    [[extractfeatures<param_set>]]
        # Identify floes and extract floe metrics from binary processed images
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            preprocess_dir=$results_dir/${location_array[$i]}/preprocess

            docker run --mount type=bind,source=$preprocess_dir,target=/tmp \
            --mount type=bind,source=$report_dir,target=/usr/local/bin/../report \
            brownccv/icefloetracker-julia:main $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl extractfeatures -i $preprocess_dir -o /tmp --minarea $minfloearea --maxarea $maxfloearea
        """

    [[tracking<param_set>]]
        # Pair and track identified floes across days
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            preprocess_dir=$results_dir/${location_array[$i]}/preprocess

            docker run --mount type=bind,source=$results_dir/${location_array[$i]}/tracker,target=/tmp \
            --mount type=bind,source=$report_dir,target=/usr/local/bin/../report \
            brownccv/icefloetracker-julia:main $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl track --imgs $preprocess_dir --props $preprocess_dir --deltat $preprocess_dir --output /tmp
        """

    [[exportH5<param_set>]]
        # Package intermediate and final outputs into HDF5 files
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )

            docker run --mount type=bind,source=$results_dir/${location_array[$i]}/preprocess,target=/tmp,$report_dir:/usr/local/bin/../report \
            brownccv/icefloetracker-julia:main $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl makeh5files --pathtosampleimg $fetchdata_dir/${location_array[$i]}/truecolor/$(ls $fetchdata_dir/${location_array[$i]}/truecolor | head -1) --resdir /tmp
        """