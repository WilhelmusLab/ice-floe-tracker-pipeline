# cycl template mytemplate.j2
[scheduler]
    allow implicit tasks = True
[task parameters]
    # Update this variable to match the range of parameter sets
    param_set = 0..{{ rows }}
[scheduling]
    initial cycle point = PT1M #creates a datetime one minute from system time in UTC
    [[graph]]
        R1 = global_setup  => mkpaths<param_set> => pullfetchimage & pulljuliaimage => fetchdata<param_set> & soit<param_set> => landmask<param_set> => preprocess<param_set> => extractfeatures<param_set> => tracking<param_set> & exportH5<param_set>
        
[runtime]
    [[root]]
        [[[environment]]]
            # Update these variables with your run parameters
            location = {{ location }}
            startdate = {{ startdate }}
            enddate = {{ enddate }}
            crs = {{ crs }} # epsg3413 for polar stereographic: left_x@top_y@right_x@lower_y
                             # wgs84 for lat/lon: top_left_lat@top_left_lon@lower_right_lat@lower_right_lon            
            bounding_box = {{ bounding_box }}
            centroid_x = {{ centroid_x }}
            centroid_y = {{ centroid_y }}
            minfloearea = {{ minfloearea }}
            maxfloearea = {{ maxfloearea }}
            project_dir = "~/ice-floe-tracker-pipeline"

            # Recommend using these default paths for output
            t = ${CYLC_WORKFLOW_INITIAL_CYCLE_POINT}
            julia_exec = "/usr/local/julia/bin/julia"
            report_dir = $project_dir/"workflow/report"
            results_dir = $project_dir/"results"/$t
            fetchdata_dir = $project_dir/"resources"/$t
            truecolor_dir = $fetchdata_dir/"truecolor"
            reflectance_dir = $fetchdata_dir/"reflectance"
            
    [[global_setup]]  
        script = """
            mkdir -p ~/.cylc
            mkdir -p ~/.cylc/flow
            cp $project_dir/config/cylc_hpc/global.cylc ~/.cylc/flow
        """

    [[mkpaths<param_set>]]
        # Convert param location list to indexable bash array and make directories for each location
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            res=$results_dir/${location_array[$i]}
            mkdir -p $fetchdata_dir/${location_array[$i]}
            mkdir -p $res/soit
            mkdir -p $res/landmasks
            mkdir -p $res/preprocess
            mkdir -p $res/tracker
            mkdir -p $res/preprocess/hdf5-files
        """

    [[pullfetchimage]]
        # Pull the latest Docker image containing software for fetching images from NASA Worldview API and satellite times from space-track.org
        # Apptainer will check the image layers and only re-download if necessary
        script = """
            apptainer pull --force $project_dir/fetchdata.simg docker://brownccv/icefloetracker-fetchdata:main
        """
        platform = oscar
        execution time limit = PT1H
        [[[directives]]]
            --mem = 12G
            --cpus-per-task = 2

    [[fetchdata<param_set>]]
        # Convert param lists to indexable bash arrays and fetch reflectance, truecolor, and landmask for each location
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            bbox_array=( $(echo $bounding_box | sed -e 's/,/ /g') )
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            startdate_array=( $(echo $startdate | sed -e 's/,/ /g') )
            enddate_array=( $(echo $enddate | sed -e 's/,/ /g') )

            apptainer exec --bind $fetchdata_dir/${location_array[$i]}:/tmp $project_dir/fetchdata.simg /usr/local/bin/fetchdata.sh -o /tmp -s ${startdate_array[$i]} -e ${enddate_array[$i]} -c $crs -b ${bbox_array[$i]}
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 5*PT30S
        execution retry delays = 5*PT6S
        [[[directives]]]
            --mem = 12G
            --cpus-per-task = 4

    [[soit<param_set>]]
        # Convert param lists to indexable bash arrays and fetch Aqua and Terra satellite times for each location
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            startdate_array=( $(echo $startdate | sed -e 's/,/ /g') )
            enddate_array=( $(echo $enddate | sed -e 's/,/ /g') )
            centroid_x_array=( $(echo $centroid_x| sed -e 's/,/ /g') )
            centroid_y_array=( $(echo $centroid_y | sed -e 's/,/ /g') )

            apptainer exec --bind $results_dir/${location_array[$i]}/soit:/tmp $project_dir/fetchdata.simg python3 /usr/local/bin/pass_time_cylc.py --startdate ${startdate_array[$i]} --enddate ${enddate_array[$i]} --csvoutpath /tmp --centroid_lat ${centroid_x_array[$i]} --centroid_lon ${centroid_y_array[$i]} --SPACEUSER $SPACEUSER --SPACEPSWD $SPACEPSWD
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 5*PT30S
        execution retry delays = 5*PT6S
        [[[directives]]]
            --mem = 12G
            --cpus-per-task = 4
    
    [[pulljuliaimage]]
        # Pull the latest Docker image containing Julia IceFloeTracker software
        # apptainer will check the image layers and only re-download if necessary 
        script = """
            apptainer pull --force $project_dir/icefloetracker-julia.simg docker://brownccv/icefloetracker-julia:main
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = 2*PT6S
        [[[directives]]]
            --mem = 32G
            --cpus-per-task = 2

    [[landmask<param_set>]]
        # Generate land masks in Julia from raw landmask file
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/landmasks:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl landmask $fetchdata_dir/${location_array[$i]} /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem-per-cpu = 4G
            --cpus-per-task = 8
    
    [[preprocess<param_set>]]
        # Preprocess the satellite imagery and convert to binary
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/preprocess:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl preprocess -t $fetchdata_dir/${location_array[$i]}/truecolor -r $fetchdata_dir/${location_array[$i]}/reflectance -l $results_dir/${location_array[$i]}/landmasks -p $results_dir/${location_array[$i]}/soit -o /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem-per-cpu = 12G
            --cpus-per-task = 20
    
    [[extractfeatures<param_set>]]
        # Identify floes and extract floe metrics from binary processed images
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            preprocess_dir=$results_dir/${location_array[$i]}/preprocess

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $preprocess_dir:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl extractfeatures -i $preprocess_dir -o /tmp --minarea $minfloearea --maxarea $maxfloearea
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem = 18G
            --cpus-per-task = 2
    
    [[tracking<param_set>]]
        # Pair and track identified floes across days
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            preprocess_dir=$results_dir/${location_array[$i]}/preprocess
            sample_img=$fetchdata_dir/${location_array[$i]}/truecolor/$(ls $fetchdata_dir/${location_array[$i]}/truecolor | head -1)

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/"tracker":/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl track --imgs $preprocess_dir --props $preprocess_dir --passtimes $preprocess_dir --latlon $sample_img --output /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem = 20G
            --cpus-per-task = 1
    
    [[exportH5<param_set>]]
        # Package intermediate and final outputs into HDF5 files
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            sample_img=$fetchdata_dir/${location_array[$i]}/truecolor/$(ls $fetchdata_dir/${location_array[$i]}/truecolor | head -1)

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/preprocess:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl makeh5files --pathtosampleimg $sample_img --resdir /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = 2*PT6S
        [[[directives]]]
            --mem = 18G
            --cpus-per-task = 2
